use crate::ast::*;
use string_cache::DefaultAtom as Atom;

grammar;

pub Program: Program = {
    Items => Program { items: <> }
};

Items: Vec<Item> = {
    Item* => <>.into_iter().filter_map(|v| v).collect()
};

Item: Option<Item> = {
    Comment => None,
    AdtDefn => Some(Item::AdtDefn(<>)),
    FnDefn => Some(Item::FnDefn(<>)),
    ClosureDefn => Some(Item::ClosureDefn(<>)),
    TraitDefn => Some(Item::TraitDefn(<>)),
    OpaqueTyDefn => Some(Item::OpaqueTyDefn(<>)),
    GeneratorDefn => Some(Item::GeneratorDefn(<>)),
    Impl => Some(Item::Impl(<>)),
    Clause => Some(Item::Clause(<>)),
    ForeignType => Some(Item::Foreign(<>)),
};

ForeignType: ForeignDefn = {
    "extern" "type" <id:Id> ";" => ForeignDefn(id),
};

Comment: () = r"//.*";

pub Goal: Box<Goal> = {
    Goal1,
    <g1:Goal1> <g2s:("," <Goal1>)+> => Box::new(Goal::And(g1, g2s)),
};

Goal1: Box<Goal> = {
    "forall" "<" <p:Comma<VariableKind>> ">" "{" <g:Goal> "}" => Box::new(Goal::ForAll(p, g)),
    "exists" "<" <p:Comma<VariableKind>> ">" "{" <g:Goal> "}" => Box::new(Goal::Exists(p, g)),
    "if" "(" <h:SemiColon<InlineClause>> ")" "{" <g:Goal> "}" => Box::new(Goal::Implies(h, g)),
    "not" "{" <g:Goal> "}" => Box::new(Goal::Not(g)),
    "compatible" "{" <g:Goal> "}" => Box::new(Goal::Compatible(g)),
    <leaf:LeafGoal> => Box::new(Goal::Leaf(leaf)),
    "(" <Goal> ")",
};

UpstreamKeyword: () = "#" "[" "upstream" "]";
AutoKeyword: () = "#" "[" "auto" "]";
MarkerKeyword: () = "#" "[" "marker" "]";
FundamentalKeyword: () = "#" "[" "fundamental" "]";
NonEnumerableKeyword: () = "#" "[" "non_enumerable" "]";
CoinductiveKeyword: () = "#" "[" "coinductive" "]";
ObjectSafeKeyword: () = "#" "[" "object_safe" "]";
PhantomDataKeyword: () = "#" "[" "phantom_data" "]";

WellKnownTrait: WellKnownTrait = {
     "#" "[" "lang" "(" "sized" ")" "]" => WellKnownTrait::Sized,
     "#" "[" "lang" "(" "copy" ")" "]" => WellKnownTrait::Copy,
     "#" "[" "lang" "(" "clone" ")" "]" => WellKnownTrait::Clone,
     "#" "[" "lang" "(" "drop" ")" "]" => WellKnownTrait::Drop,
     "#" "[" "lang" "(" "fn_once" ")" "]" => WellKnownTrait::FnOnce,
     "#" "[" "lang" "(" "fn_mut" ")" "]" => WellKnownTrait::FnMut,
     "#" "[" "lang" "(" "fn" ")" "]" => WellKnownTrait::Fn,
     "#" "[" "lang" "(" "unsize" ")" "]" => WellKnownTrait::Unsize,
     "#" "[" "lang" "(" "unpin" ")" "]" => WellKnownTrait::Unpin,
     "#" "[" "lang" "(" "coerce_unsized" ")" "]" => WellKnownTrait::CoerceUnsized,
     "#" "[" "lang" "(" "discriminant_kind" ")" "]" => WellKnownTrait::DiscriminantKind,
     "#" "[" "lang" "(" "generator" ")" "]" => WellKnownTrait::Generator,
};

AdtReprAttr: AdtReprAttr = {
    "#" "[" "repr" "(" <t:ReprIntTy> ")" "]" => AdtReprAttr::Int(t),
    "#" "[" "repr" "(" <attr:Id> ")" "]" =>? match &*attr.str {
        "C" => Ok(AdtReprAttr::C),
        "packed" => Ok(AdtReprAttr::Packed),
        _ => Err(lalrpop_util::ParseError::User {
            error: "unknown adt repr flag"
        })
    },
};

ReprIntTy: Ty = {
    <i:IntTy> => Ty::Scalar {
        ty: ScalarType::Int(i),
    },
    <u:UintTy> => Ty::Scalar {
        ty: ScalarType::Uint(u),
    },
}

AdtDefn: AdtDefn = {
    <variances:Variances?> <upstream:UpstreamKeyword?> <fundamental:FundamentalKeyword?> <phantom_data:PhantomDataKeyword?> <repr:AdtReprAttr*>
        "enum" <n:Id><p:Angle<VariableKind>>
        <w:QuantifiedWhereClauses> "{" <v:Variants> "}" => AdtDefn
    {
        name: n,
        variable_kinds: p,
        where_clauses: w,
        variants: v,
        flags: AdtFlags {
            upstream: upstream.is_some(),
            fundamental: fundamental.is_some(),
            phantom_data: phantom_data.is_some(),
            kind: AdtKind::Enum,
        },
        repr: AdtRepr {
            c: repr.iter().any(|s| s == &AdtReprAttr::C),
            packed: repr.iter().any(|s| s == &AdtReprAttr::Packed),
            int: repr.iter().find_map(|s| if let AdtReprAttr::Int(i) = s {
                Some(i.clone())
            } else {
                None
            })
        },
        variances,
    },
    <variances:Variances?> <upstream:UpstreamKeyword?> <fundamental:FundamentalKeyword?> <phantom_data:PhantomDataKeyword?> <repr:AdtReprAttr*>
        "struct" <n:Id><p:Angle<VariableKind>>
        <w:QuantifiedWhereClauses> "{" <f:Fields> "}" => AdtDefn
    {
        variants: vec![Variant {
            // FIXME(#505) choose a proper span
            name: Identifier {
                str: Atom::from("0"),
                span: n.span,
            },
            fields: f,
        }],
        name: n,
        variable_kinds: p,
        where_clauses: w,
        flags: AdtFlags {
            upstream: upstream.is_some(),
            fundamental: fundamental.is_some(),
            phantom_data: phantom_data.is_some(),
            kind: AdtKind::Struct,
        },
        repr: AdtRepr {
            c: repr.iter().any(|s| s == &AdtReprAttr::C),
            packed: repr.iter().any(|s| s == &AdtReprAttr::Packed),
            int: None
        },
        variances,
    }
};

Variants: Vec<Variant> = {
    <Comma<Variant>>,
};

Variant: Variant = {
    <n: Id> "{" <f:Fields> "}" => Variant {
        name: n,
        fields: f,
    },
    <n: Id> "(" <tys:Comma<Ty>> ")" => Variant {
        fields: tys.into_iter().enumerate().map(|(i, t)| Field {
            // FIXME(#505) choose a proper span
            name: Identifier {
                str: Atom::from(format!("{}", i)),
                span: n.span,
            },
            ty: t,
        }).collect(),
        name: n,
    },
    <n: Id> => Variant {
        name: n,
        fields: vec![],
    },
};

FnReturn: Ty = {
    "->" <ty:Ty> => ty,
};

FnDefn: FnDefn = {
    <variances:Variances?> <safety:Safety?> <abi:FnAbi?> "fn" <n:Id> <p:Angle<VariableKind>>"(" <args:FnArgs> ")"
        <ret_ty:FnReturn?> <w:QuantifiedWhereClauses> ";" => FnDefn
    {
        name: n,
        variable_kinds: p,
        where_clauses: w,
        sig: FnSig {
            abi: abi.unwrap_or_default(),
            safety: safety.unwrap_or_default(),
            variadic: args.is_variadic(),
        },
        argument_types: args.to_tys(),
        return_type: ret_ty.unwrap_or_else(|| Ty::Tuple { types: Vec::new() }),
        variances,
    }
};

Movability: Movability = {
    "static" => Movability::Static,
     => Movability::Movable
}

GeneratorDefn: GeneratorDefn = {
    "generator" <m:Movability> <n:Id> <p:Angle<VariableKind>> "[" "resume" "=" <resume:Ty> "," "yield" "=" <yield_ty:Ty> "]" <ret_ty:FnReturn?>
    "{"
       "upvars" "[" <upvars:SemiColon<Ty>> "]"
       "witnesses" <l:ExistsLifetimes?> "[" <witnesses:SemiColon<Ty>> "]"
    "}" => GeneratorDefn {
       name: n,
       movability: m,
       variable_kinds: p,
       upvars: upvars,
       witness_lifetimes: l.unwrap_or_default(),
       resume_ty: resume,
       yield_ty: yield_ty,
       return_ty: ret_ty.unwrap_or_else(|| Ty::Tuple { types: Vec::new() }),
       witness_types: witnesses
   }
}

FnAbi: FnAbi = "extern" "\"" <id:Id> "\"" => FnAbi(id.str);

FnArg: FnArg = {
    Id ":" "..." => FnArg::Variadic,
    Id ":" <arg_ty: Ty> => FnArg::NonVariadic(arg_ty),
};

FnArgs: FnArgs = {
    <Comma<FnArg>> =>? FnArgs::from_vec(<>).map_err(|e| lalrpop_util::ParseError::User {
        error: e,
    })
};

ClosureDefn: ClosureDefn = {
    "closure" <n:Id> <p:Angle<VariableKind>> "(" <s:ClosureSelf> <args:ClosureArgs> ")" <ret_ty:FnReturn?>
        "{" <upvars:SemiColon<Ty>> "}" => ClosureDefn {
        name: n,
        kind: s,
        variable_kinds: p,
        argument_types: args,
        return_type: ret_ty.unwrap_or_else(|| Ty::Tuple { types: Vec::new() }),
        upvars: upvars,
    }
}

ClosureSelf: ClosureKind = {
    "self" => ClosureKind::FnOnce,
    "&" "mut" "self" => ClosureKind::FnMut,
    "&" "self" => ClosureKind::Fn,
}

ClosureArgs: Vec<Ty> = {
    "," <args:FnArgs> => args.to_tys(),
}

TraitDefn: TraitDefn = {
    <auto:AutoKeyword?> <marker:MarkerKeyword?> <upstream:UpstreamKeyword?> <fundamental:FundamentalKeyword?> <non_enumerable:NonEnumerableKeyword?> <coinductive:CoinductiveKeyword?> <object_safe:ObjectSafeKeyword?> <well_known:WellKnownTrait?> "trait" <n:Id><p:Angle<VariableKind>>
        <w:QuantifiedWhereClauses> "{" <a:AssocTyDefn*> "}" => TraitDefn
    {
        name: n,
        variable_kinds: p,
        where_clauses: w,
        assoc_ty_defns: a,
        well_known,
        flags: TraitFlags {
            auto: auto.is_some(),
            marker: marker.is_some(),
            upstream: upstream.is_some(),
            fundamental: fundamental.is_some(),
            non_enumerable: non_enumerable.is_some(),
            coinductive: coinductive.is_some(),
            object_safe: object_safe.is_some(),
        },
    }
};

AssocTyDefn: AssocTyDefn = {
    "type" <name:Id> <p:Angle<VariableKind>> <b:(":" <Plus<QuantifiedInlineBound>>)?>
        <w:QuantifiedWhereClauses> ";" =>
    {
        AssocTyDefn {
            name: name,
            variable_kinds: p,
            where_clauses: w,
            bounds: b.unwrap_or(vec![]),
        }
    }
};

OpaqueTyDefn: OpaqueTyDefn = {
    "opaque" "type" <name:Id> <p:Angle<VariableKind>> <b:(":" <Plus<QuantifiedInlineBound>>)?>
        <w:QuantifiedWhereClauses> "=" <ty:Ty> ";" => {
        OpaqueTyDefn {
            ty,
            variable_kinds: p,
            name,
            bounds: b.unwrap_or(vec![]),
            where_clauses: w,
        }
    }
};

InlineBound: InlineBound = {
    TraitBound => InlineBound::TraitBound(<>),
    AliasEqBound => InlineBound::AliasEqBound(<>),
};

TraitBound: TraitBound = {
    <t:Id> <a:Angle<GenericArg>> => {
        TraitBound {
            trait_name: t,
            args_no_self: a,
        }
    }
};

AliasEqBound: AliasEqBound = {
    <t:Id> "<" <a:(<Comma<GenericArg>> ",")?> <name:Id> <a2:Angle<GenericArg>>
        "=" <ty:Ty> ">" => AliasEqBound
    {
        trait_bound: TraitBound {
            trait_name: t,
            args_no_self: a.unwrap_or(vec![]),
        },
        name,
        args: a2,
        value: ty,
    }
};

QuantifiedInlineBound: QuantifiedInlineBound = {
    <b:InlineBound> => QuantifiedInlineBound {
        variable_kinds: vec![],
        bound: b,
    },

    "forall" "<" <pk:Comma<VariableKind>> ">" <b:InlineBound> => QuantifiedInlineBound {
        variable_kinds: pk,
        bound: b,
    },
};

Impl: Impl = {
    <external:UpstreamKeyword?> "impl" <p:Angle<VariableKind>> <mark:"!"?> <t:Id> <a:Angle<GenericArg>> "for" <s:Ty>
        <w:QuantifiedWhereClauses> "{" <assoc:AssocTyValue*> "}" =>
    {
        let mut args = vec![GenericArg::Ty(s)];
        args.extend(a);
        Impl {
            variable_kinds: p,
            polarity: Polarity::from_bool(mark.is_none()),
            trait_ref: TraitRef {
                trait_name: t,
                args: args,
            },
            where_clauses: w,
            assoc_ty_values: assoc,
            impl_type: external.map(|_| ImplType::External).unwrap_or(ImplType::Local),
        }
    },
};

VariableKind: VariableKind = {
    Id => VariableKind::Ty(<>),
    LifetimeId => VariableKind::Lifetime(<>),
    "const" <id:Id> => VariableKind::Const(id),
    "int" <id:Id> => VariableKind::IntegerTy(id),
    "float" <id:Id> => VariableKind::FloatTy(id),
};

RawVariance: Variance = {
    "Invariant" => Variance::Invariant,
    "Covariant" => Variance::Covariant,
    "Contravariant" => Variance::Contravariant,
}

Variances: Vec<Variance> = "#" "[" "variance" "(" <Comma<RawVariance>> ")" "]";

AssocTyValue: AssocTyValue = {
    <default:"default"?> "type" <n:Id> <a:Angle<VariableKind>> "=" <v:Ty> ";" => AssocTyValue {
        name: n,
        variable_kinds: a,
        value: v,
        default: default.is_some(),
    },
};

pub Ty: Ty = {
    <n:Id> => Ty::Id { name: n },
    TyWithoutId,
};

Safety: Safety = {
    "unsafe" => Safety::Unsafe,
};

FnArgTy: FnArg = {
    "..." => FnArg::Variadic,
    <arg_ty: Ty> => FnArg::NonVariadic(arg_ty),
};

FnArgTys: FnArgs = {
    <Comma<FnArgTy>> =>? FnArgs::from_vec(<>).map_err(|e| lalrpop_util::ParseError::User {
        error: e,
    })
};

TyWithoutId: Ty = {
    <l:ForLifetimes?> <safety:Safety?> <abi:FnAbi?> "fn" "(" <types:FnArgTys> ")" <ret_ty:FnReturn?> => Ty::ForAll {
        lifetime_names: l.unwrap_or_default(),
        sig: FnSig {
            variadic: types.is_variadic(),
            safety: safety.unwrap_or_default(),
            abi: abi.unwrap_or_default(),
        },
        types: types
                   .to_tys()
                   .into_iter()
                   .chain(std::iter::once(ret_ty.unwrap_or_else(|| Ty::Tuple { types: Vec::new() })))
                   .map(Box::new).collect(),
    },
    <ScalarType> => Ty::Scalar { ty: <> },
    "str" => Ty::Str,
    "!" => Ty::Never,
    "dyn" <b:Plus<QuantifiedInlineBound>> "+" <l:Lifetime> => Ty::Dyn {
        bounds: b,
        lifetime: l,
    },
    <n:Id> "<" <a:Comma<GenericArg>> ">" => Ty::Apply { name: n, args: a },
    <p:ProjectionTy> => Ty::Projection { proj: p },
    "(" <t:TupleOrParensInner> ")" => t,
    "*" <m: RawMutability> <t:Ty> => Ty::Raw{ mutability: m, ty: Box::new(t) },
    "&" <l: Lifetime> "mut" <t:Ty> => Ty::Ref{ mutability: Mutability::Mut, lifetime: l, ty: Box::new(t) },
    "&" <l: Lifetime> <t:Ty> => Ty::Ref{ mutability: Mutability::Not, lifetime: l, ty: Box::new(t) },
    "[" <t:Ty> "]" => Ty::Slice { ty: Box::new(t) },
    "[" <t:Ty> ";" <len:Const> "]" => Ty::Array { ty: Box::new(t), len },
};

ExistsLifetimes: Vec<Identifier> = "exists" "<" <Comma<LifetimeId>> ">" => <>;
ForLifetimes: Vec<Identifier> = "for" "<" <Comma<LifetimeId>> ">" => <>;

IntTy: IntTy = {
    "i8" => IntTy::I8,
    "i16" => IntTy::I16,
    "i32" => IntTy::I32,
    "i64" => IntTy::I64,
    "i128" => IntTy::I128,
    "isize" => IntTy::Isize,
};

UintTy: UintTy = {
    "u8" => UintTy::U8,
    "u16" => UintTy::U16,
    "u32" => UintTy::U32,
    "u64" => UintTy::U64,
    "u128" => UintTy::U128,
    "usize" => UintTy::Usize,
};

FloatTy: FloatTy = {
    "f32" => FloatTy::F32,
    "f64" => FloatTy::F64,
};

ScalarType: ScalarType = {
    <i:IntTy> => ScalarType::Int(i),
    <u:UintTy> => ScalarType::Uint(u),
    <f:FloatTy> => ScalarType::Float(f), 
    "bool" => ScalarType::Bool,
    "char" => ScalarType::Char,
};

TupleOrParensInner: Ty = {
    <Ty>,
    <first:Ty> "," <rest:Comma<Ty>> => {
        let mut types = Vec::with_capacity(rest.len() + 1);
        types.push(Box::new(first));
        types.extend(rest.into_iter().map(Box::new));
        Ty::Tuple { types }
    },
    () => Ty::Tuple { types: vec![] },
};

RawMutability: Mutability = {
    "mut" => Mutability::Mut,
    "const" => Mutability::Not,
};

Lifetime: Lifetime = {
    <n:LifetimeId> => Lifetime::Id { name: n },
    "'static" => Lifetime::Static,
    "'erased" => Lifetime::Erased,
    "'empty" => Lifetime::Empty,
};

ConstWithoutId: Const = {
    ConstValue => Const::Value(<>),
};

Const : Const = {
    Id => Const::Id(<>),
    ConstWithoutId,
};

GenericArg: GenericArg = {
    TyWithoutId => GenericArg::Ty(<>),
    Lifetime => GenericArg::Lifetime(<>),
    Id => GenericArg::Id(<>),
    ConstWithoutId => GenericArg::Const(<>),
};

ProjectionTy: ProjectionTy = {
    "<" <t:TraitRef<"as">> ">" "::" <n:Id> <a:Angle<GenericArg>> => ProjectionTy {
        trait_ref: t, name: n, args: a
    },
};

Fields: Vec<Field> = {
    <Comma<Field>>,
};

Field: Field = {
    <n:Id> ":" <t: Ty> => Field {
        name: n,
        ty: t,
    }
};

Clause: Clause = {
    "forall" <pk:Angle<VariableKind>> "{" <dg:DomainGoal> "if" <g:Comma<Goal1>> "}" => Clause {
        variable_kinds: pk,
        consequence: dg,
        conditions: g,
    },

    "forall" <pk:Angle<VariableKind>> "{" <dg:DomainGoal> "}" => Clause {
        variable_kinds: pk,
        consequence: dg,
        conditions: vec![],
    },
};

InlineClause1: Clause = {
    <dg:DomainGoal> => Clause {
        variable_kinds: vec![],
        consequence: dg,
        conditions: vec![],
    },

    <dg:DomainGoal> ":" "-" <g:Comma<Goal1>> => Clause {
        variable_kinds: vec![],
        consequence: dg,
        conditions: g,
    },
};

InlineClause: Clause = {
    <InlineClause1>,

    "forall" "<" <pk:Comma<VariableKind>> ">" "{" <c:InlineClause1> "}" => Clause {
        variable_kinds: pk,
        consequence: c.consequence,
        conditions: c.conditions,
    }
};

WhereClause: WhereClause = {
    <t:TraitRef<":">> => WhereClause::Implemented { trait_ref: t },

    // `T: Foo<U = Bar>` -- projection equality
    <s:Ty> ":" <t:Id> "<" <a:(<Comma<GenericArg>> ",")?> <name:Id> <a2:Angle<GenericArg>>
        "=" <ty:Ty> ">" =>
    {
        let mut args = vec![GenericArg::Ty(s)];
        if let Some(a) = a { args.extend(a); }
        let trait_ref = TraitRef { trait_name: t, args: args };
        let projection = ProjectionTy { trait_ref, name, args: a2 };
        WhereClause::ProjectionEq { projection, ty }
    },

    // 'a: 'b
    <a:Lifetime> ":" <b:Lifetime> => {
        WhereClause::LifetimeOutlives { a, b }
    },

    // T: 'a
    <ty:Ty> ":" <lifetime:Lifetime>  => {
        WhereClause::TypeOutlives { ty, lifetime }
    }
};

QuantifiedWhereClause: QuantifiedWhereClause = {
    <wc:WhereClause> => QuantifiedWhereClause {
        variable_kinds: vec![],
        where_clause: wc,
    },

    "forall" "<" <pk:Comma<VariableKind>> ">" <wc:WhereClause> => QuantifiedWhereClause {
        variable_kinds: pk,
        where_clause: wc,
    },
};

QuantifiedWhereClauses: Vec<QuantifiedWhereClause> = {
    "where" <Comma<QuantifiedWhereClause>>,
    () => vec![],
};

DomainGoal: DomainGoal = {
    <wc: WhereClause> => DomainGoal::Holds { where_clause: wc },

    "WellFormed" "(" <t:Ty> ")" => DomainGoal::TyWellFormed { ty: t },

    "WellFormed" "(" <t:TraitRef<":">> ")" => DomainGoal::TraitRefWellFormed { trait_ref: t },

    "FromEnv" "(" <t:Ty> ")" => DomainGoal::TyFromEnv { ty: t },

    "FromEnv" "(" <t:TraitRef<":">> ")" => DomainGoal::TraitRefFromEnv { trait_ref: t },

    // `<T as Foo>::U -> Bar` -- a normalization
    "Normalize" "(" <s:ProjectionTy> "->" <t:Ty> ")" => DomainGoal::Normalize { projection: s, ty: t },

    "IsLocal" "(" <ty:Ty> ")" => DomainGoal::IsLocal { ty },
    "IsUpstream" "(" <ty:Ty> ")" => DomainGoal::IsUpstream { ty },
    "IsFullyVisible" "(" <ty:Ty> ")" => DomainGoal::IsFullyVisible { ty },

    "LocalImplAllowed" "(" <trait_ref:TraitRef<":">> ")" => DomainGoal::LocalImplAllowed { trait_ref },

    "Compatible" => DomainGoal::Compatible,
    "DownstreamType" "(" <ty:Ty> ")" => DomainGoal::DownstreamType { ty },

    "Reveal" => DomainGoal::Reveal,

    "ObjectSafe" "(" <id:Id> ")" => DomainGoal::ObjectSafe { id }
};

LeafGoal: LeafGoal = {
    <dg: DomainGoal> => LeafGoal::DomainGoal { goal: dg },

    <a:GenericArg> "=" <b:GenericArg> => LeafGoal::UnifyGenericArgs { a, b },

    "Subtype" "(" <a:Ty> "," <b:Ty> ")" => LeafGoal::SubtypeGenericArgs { a, b },
};

TraitRef<S>: TraitRef = {
    <s:Ty> S <t:Id> <a:Angle<GenericArg>> => {
        let mut args = vec![GenericArg::Ty(s)];
        args.extend(a);
        TraitRef {
            trait_name: t,
            args: args,
        }
    },
};

Separator<S, T>: Vec<T> = {
    Separator1<S, T>? => <>.unwrap_or(vec![])
};

Separator1<S, T>: Vec<T> = {
    <t:T> => vec![t],
    <v:Separator<S, T>> S <t:T> => {
        let mut v = v;
        v.push(t);
        v
    }
};

#[inline]
Comma<T>: Vec<T> = {
    <v:Separator<",", T>> "," => v,
    <v:Separator<",", T>> => v,
};

#[inline]
SemiColon<T>: Vec<T> = {
    <Separator<";", T>>
};

#[inline]
Plus<T>: Vec<T> = {
    <Separator<"+", T>>
};

Angle<T>: Vec<T> = {
    "<" <Comma<T>> ">",
    () => vec![],
};

Id: Identifier = {
    <l:@L> <s:r"([A-Za-z]|_)([A-Za-z0-9]|_)*"> <r:@R> => Identifier {
        str: Atom::from(s),
        span: Span::new(l, r),
    }
};

LifetimeId: Identifier = {
    <l:@L> <s:r"'([A-Za-z]|_)([A-Za-z0-9]|_)*"> <r:@R> => Identifier {
        str: Atom::from(s),
        span: Span::new(l, r),
    }
};

ConstValue: u32 = <s:r"[0-9]+"> => u32::from_str_radix(s, 10).unwrap();
