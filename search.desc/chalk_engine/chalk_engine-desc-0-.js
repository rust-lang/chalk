searchState.loadedDescShard("chalk_engine", 0, "An alternative solver based around the SLG algorithm, which\nAn “answer” in the on-demand solver corresponds to a …\nThe paper describes these as <code>A :- D | G</code>.\nA “floundered” subgoal is one that contains unbound …\nEither <code>A</code> or <code>~A</code>, where <code>A</code> is a <code>Env |- Goal</code>.\nThe <code>Minimums</code> structure is used to track the dependencies …\nThe “time stamp” is a simple clock that gets …\nTrue if any subgoals were depended upon negatively and …\nIf this flag is set, then the answer could be neither …\nIf this flag is set, then the answer could be neither …\nTime stamp that is incremented each time we find an answer …\nRegion constraints we have accumulated.\nDefines traits used to embed the chalk-engine in another …\nWe assume that negative literals cannot have coinductive …\nLiteral that floundered.\nList of subgoals that have floundered. See …\nCurrent value of the strand’s clock at the time of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSubgoals: literals that must be proven\nThe substitution which, applied to the goal of our table, …\nContains values for the unbound inference variables for …\nContains values for the unbound inference variables for …\nUpdate our fields to be the minimum of our current value …\nThe next available answer.\nNo answer could be returned because the goal has …\nNo answer could be returned because there are no more …\nInvokes <code>test</code> with each possible future answer, returning …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGets the next answer for a given goal, incrementing the …\nGets the next answer for a given goal, but doesn’t …\nGiven a selected negative subgoal, the subgoal is “…\nGiven a selected positive subgoal, applies the subgoal …\nWhen a table is first created, this function is invoked to …\nThis is a clock which always increases. It is incremented …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGiven a subgoal, converts the literal into u-canonical form\nGiven a u-canonical goal, searches for an existing table. …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a “solver” for a given goal in the form of an …\nPanics\nReturns an answer with a given index for the given table. …\nSimplifies a goal into a series of positive domain goals …\nContains the error value\nThe table cannot be solved without more type information.\nThe current answer index is not useful. Currently, this is …\nA negative cycle was found. This is fail-fast, so even if …\nThe table we were trying to solve cannot succeed.\nThis is returned <code>on_no_remaining_subgoals</code>\nThis strand has no remaining subgoals, but there may still …\nContains the success value\nWe did not find a solution, but we still have things to …\nThere is an answer available for the root table\nThe different ways that a <em>root</em> search (which potentially …\nThere was a <code>RootSearchFail</code>\nA subgoal was successfully selected. It has already been …\nThis is returned when we try to select a subgoal for a …\nInvoked after we have determined that every strand in <code>table</code>\nA “refinement” strand is used in coinduction. When the …\nEnsures that answer with the given index is available from …\nRemoves the subgoal at <code>subgoal_index</code> from the strand’s …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis is called when an answer is available for the …\nThis is called if the selected subgoal for a <code>Strand</code> is a …\nThis is called when there are no remaining subgoals for a …\nThis is called if the selected subgoal for <code>strand</code> is a …\nInvoked after we’ve selected a (new) subgoal for the …\nThis is called when the selected subgoal for a strand has …\nInvoked when a strand represents an <strong>answer</strong>. This means …\nTrue if all the tables on the stack starting from <code>depth</code> and\nUnwinds the entire stack, returning all active strands …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGiven a value <code>value</code> with variables in it, replaces those …\nReturns true if the two consts could be unequal.\nReturns true if the two consts could be unequal.\nReturns true if the two types could be unequal.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCombines the <code>goal</code> (instantiated within <code>infer</code>) with the …\nMethods for combining solutions to yield an aggregate …\nAnti-unification is the act of taking two things that do …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGiven a current substitution used as guidance for <code>root_goal</code>…\nWhen we encounter a variable in the answer goal, we first …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTracks the debrujn index of the first binder that is …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSee <code>Forest</code>.\nThe StackIndex identifies the position of a table’s goal …\nThe clock TimeStamp of this stack entry.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSearches the stack to see if <code>table</code> is active. If so, …\nPops the top-most entry from the stack:\nPops the top-most entry from the stack, which should have …\nPops the top-most entry from the stack, which should have …\nStack: as described above, stores the in-progress goals.\nThe goal G from the stack entry <code>A :- G</code> represented here.\nIndex of the answer we should request next from the table\nThe kind/universe of the variable.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndex into <code>ex_clause.subgoals</code>.\nThe index of the subgoal in <code>ex_clause.subgoals</code>\nThe index of the table that we created or found for this …\nMaps the universes of the subgoal to the canonical …\nThe item that is canonicalized.\nStores the answers that we have found thus far. When we …\nAn alternative storage for the answers we have so far, …\nA goal is coinductive if it can assume itself to be true, …\nRemove the next strand from the queue that meets the given …\nPush a strand to the back of the queue of strands to be …\nTrue if this table is floundered, meaning that it doesn’…\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the table is floundered.\nMark the table as floundered – this also discards all …\nAdds <code>answer</code> to our list of answers, unless it is already …\nStores the active strands that we can “pull on” to …\nThe goal this table is trying to solve (also the key to …\nSee <code>Forest</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe index that will be given to the next table to be …\nMaps from a canonical goal to the index of its table.\nTable: as described above, stores the key information for …")